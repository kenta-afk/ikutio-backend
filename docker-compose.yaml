services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    env_file:
      - backend/db/mysql/dev/.env
    ports:
      - "3306:3306"
    volumes:
      - ./backend/db/mysql/mysql-data:/var/lib/mysql

  postgresql:
    image: postgres:17-alpine3.22
    container_name: postgresql
    env_file:
      - backend/db/postgresql/dev/.env
    ports:
      - "5432:5432"
    volumes:
      - ./backend/db/postgresql/postgresql-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d app"]
      interval: 30s
      timeout: 5s
      start_period: 10s
      retries: 5

  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - ./backend/db/dynamodb/dynamodb-data:/home/dynamodblocal/data
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000 || exit 1"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3

  dynamodb-admin:
    image: aaronshaf/dynamodb-admin
    container_name: dynamodb-admin
    ports:
      - "8001:8001"
    env_file:
      - backend/db/dynamodb/dev/.env
    depends_on:
      - dynamodb-local
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8001"]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3
  
  migration:
    container_name: migration
    build: 
      context: backend/db/postgresql
      dockerfile: Dockerfile
    env_file:
      - backend/db/postgresql/dev/.env
    volumes:
      - ./backend/db/postgresql/migrations:/migrations
    working_dir: /migrations
    command: sqlx migrate run --source /migrations
    depends_on:
      postgresql:
        condition: service_healthy

  authservice:
    container_name: authservice
    build: 
      context: backend/authservice
      dockerfile: dev/Dockerfile
    ports:
      - "50053:50053"
    volumes:
      - ./backend/authservice:/app
      - rust-cargo-registry:/usr/local/cargo/registry
      - rust-cargo-git:/usr/local/cargo/git
      - rust-target:/usr/local/cargo/target
    env_file:
      - backend/authservice/dev/.env
    depends_on:
      postgresql:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
  bff:
    container_name: bff
    build:
      context: backend/bff
      dockerfile: dev/Dockerfile
    ports:
      - "50052:50052"
    volumes:
      - ./backend/bff:/app
      - rust-cargo-registry:/usr/local/cargo/registry
      - rust-cargo-git:/usr/local/cargo/git
      - rust-target:/usr/local/cargo/target
    env_file:
      - backend/bff/dev/.env
    depends_on:
      - authservice

volumes:
  rust-cargo-registry:
  rust-cargo-git:
  rust-target:

